# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R_BfrEsZl0azAAVZW3KG_0UDibP4dEqZ
"""

import pandas as pd

# Load your dataset
movies = pd.read_csv('/content/Movies Recommendation.csv')

# Display the first few rows of the dataset here
print(movies.head())

# Example: Extracting genres as a list
movies['Movie_Genre'] = movies['Movie_Genre'].apply(lambda x: x.split('|'))

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Combine relevant features into a single string
def combine_features(row):
    return ' '.join(row['Movie_Genre']) + ' ' + str(row['Movie_Cast']) + ' ' + str(row['Movie_Crew'])+ ' '+ str(row['Movie_Title'])

movies['combined_features'] = movies.apply(combine_features, axis=1)

# Use TF-IDF Vectorizer to convert text data into vectors
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['combined_features'])

# Compute the cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)




indices = pd.Series(movies.index, index=movies['Movie_Title']).drop_duplicates()

def recommend_movies(title, cosine_sim=cosine_sim):
    if title not in indices:
        return "Movie not found in the dataset."
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11]
    movie_indices = [i[0] for i in sim_scores]
    return movies['Movie_Title'].iloc[movie_indices]



print(recommend_movies('Dark Knight'))

